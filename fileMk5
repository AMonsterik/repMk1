
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <limits>
#include <iomanip>

using namespace std;

enum class Day {
    MONDAY = 1,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY,
    SUNDAY
};


struct Lesson {
    string subject;
    string teacher;
    string time;
};

string dayToString(Day day) {
    switch (day) {
    case Day::MONDAY:    return "Monday";
    case Day::TUESDAY:   return "Tuesday";
    case Day::WEDNESDAY: return "Wednesday";
    case Day::THURSDAY:  return "Thursday";
    case Day::FRIDAY:    return "Friday";
    case Day::SATURDAY:  return "Saturday";
    case Day::SUNDAY:    return "Sunday";
    default:             return "Unknown";
    }
}

void printSchedule(const map<Day, vector<Lesson>>& schedule, Day day) {
    cout << "Schedule for " << dayToString(day) << ":" << endl;

    if (schedule.count(day) == 0 || schedule.at(day).empty()) {
        cout << "No classes scheduled for this day." << endl;
        return;
    }

    for (const Lesson& lesson : schedule.at(day)) {
        cout << "  " << left << setw(10) << lesson.time << " "
            << left << setw(12) << lesson.subject << " "
            << lesson.teacher << endl;
    }
    cout << endl;
}

int getValidatedDayInput() {
    int dayInput;
    while (true) {
        cout << "Enter the day of the week (1-7):" << endl;
        cout << "1) Monday" << endl;
        cout << "2) Tuesday" << endl;
        cout << "3) Wednesday" << endl;
        cout << "4) Thursday" << endl;
        cout << "5) Friday" << endl;
        cout << "6) Saturday" << endl;
        cout << "7) Sunday" << endl;

        cin >> dayInput;
        if (cin.fail() || dayInput < 1 || dayInput > 7) {
            cout << "Invalid input. Please enter a number between 1 and 7." << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            continue;
        }
        break;
    }
    return dayInput;
}

int main() {
    setlocale(LC_ALL, "Rus");

    map<Day, vector<Lesson>> schedule = {
        {Day::MONDAY, {
            {"Algebra",   "Ryan Gosling",    "9:00-10:30"},
            {"Physics",   "Michael Jackson", "10:45-12:15"}
        }},
        {Day::TUESDAY, {
            {"History",  "Billy Herrington",  "11:00-12:30"},
            {"Literature", "Maxim Marcinkevich", "13:00-14:30"}
        }},
        {Day::WEDNESDAY, {
            {"Chemistry", "Vladimir Putin",    "10:00-11:30"},
            {"Biology",  "Gabe Newell",       "11:45-13:15"}
        }},
        {Day::THURSDAY, {
            {"Geography",    "Jackie Chan",    "9:00-10:30"},
            {"Informatics", "Winston Churchill", "10:45-12:15"}
        }},
        {Day::FRIDAY, {
            {"Russian",      "Adolf Hitler",   "11:00-12:30"},
            {"Foreign Lang", "Donald Trump",    "13:00-14:30"}
        }},
        {Day::SATURDAY, {}},
        {Day::SUNDAY, {}}
    };

    int dayInput = getValidatedDayInput();
    printSchedule(schedule, static_cast<Day>(dayInput));

    return 0;
}
